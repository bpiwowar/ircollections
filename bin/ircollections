#!/usr/bin/env python3

#
# Main file to access IR tasks
# and manage them
#

from lxml import etree
from lxml.builder import ElementMaker
import urllib.request

import argparse
import sys
import os.path
from os.path import join
import tempfile
import tarfile
import gzip
import shutil
import re
import subprocess
import json

import trec

#
# Global variables ###
#

# The main IR Collections directory
ircdir = os.path.dirname(
    os.path.abspath(os.path.dirname(os.path.realpath(__file__))))

xpns = "http://experimaestro.lip6.fr"
ircns = "http://ircollections.sourceforge.net"

ircNamespaces = {"irc": ircns, "xp": xpns}

ircnsNone = {None: ircns, "xp": xpns}
XML = ElementMaker(namespace=ircns, nsmap=ircnsNone)


#
# Utility functions ###
#

# {{{ http://code.activestate.com/recipes/552732/ (r1)
def rm_rf(d):
    log("Removing directory %s" % d)
    for path in (os.path.join(d, f) for f in os.listdir(d)):
        if os.path.isdir(path):
            rm_rf(path)
        else:
            os.unlink(path)
    os.rmdir(d)
# end of http://code.activestate.com/recipes/552732/ }}}


def log(message):
    sys.stderr.write(message)
    sys.stderr.write("\n")


def xppath(path):
    return {
        "$type": "{%s}file" % xpns,
        "$value": path
    }


def find(task, name):
    """ Find the first task ancestor that has an element of a given name
    """
    l = task.xpath("ancestor-or-self::irc:task[irc:%s][1]/irc:%s" %
                   (name, name), namespaces=ircNamespaces)
    if len(l) == 0:
        raise Exception("Could not find a definition for task '%s'" % (name))
    return l[0]


def findDefinition(definitions, id, parentType, type):
    """Find a definition for a given id and type
        A definition is an XML element

        definitions -- The source XML documents
        parentType -- The type of the parent XML element
        type -- The type of the definition XML element
        id -- The id of the definition (matches an id attribute)
    """
    xpathStr = "//irc:%s/irc:%s[@id='%s']" % (parentType, type, id)
    el = []
    for doc, priority in definitions:
        el = el + doc.xpath(xpathStr, namespaces=ircNamespaces)

    if len(el) == 0:
        raise Exception("Could not find a %s/%s with id %s" %
                        (parentType, type, id))
    if len(el) > 1:
        raise Exception("Found too many a %s/%s with id %s (found %d)" %
                        (parentType, type, id, len(el)))
    el = el[0]

    # Look for an alias
    alias = el.get("alias")
    if not alias is None:
        # Find the definition of the alias...
        a = findDefinition(definitions, alias, parentType, type)
        # ... and append ourselves to the end
        a.append(el)
        return a

    priorities = {}

    # Look at patterns
    patternPath = "//irc:%s/irc:%s[@pattern]" % (parentType, type)
    for doc, priority in definitions:
        for e in xpath(doc, patternPath):
            if re.match(e.get("pattern"), el.get("id")):
                # If we have a pattern match, we merge the elements
                # (1) Attributes [but pattern]
                for k, v in e.attrib.items():
                    if not (k == "pattern") and ((el.get(k) is None) or (priorities.get(k, 0) < priority)):
                        el.set(k, v)
                        priorities[k] = priority

                # (2) Elements
                for l in e:
                    el.append(l)

    # print(etree.tostring(el, pretty_print=True))

    return [el]


def absolutePath(*args):
    """Returns the absolute path of a path relative to the IR collections base directory"""
    return os.path.join(ircdir, os.path.join(*args))


def xpath(node, path):
    """Run XPath query with predefined irc namespace"""
    return node.xpath(path, namespaces=ircNamespaces)


def xpath1(node, path):
    """Get the first item returned by an XPath"""
    n = node.xpath(path, namespaces=ircNamespaces)
    if len(n) > 1:
        raise Exception("More than one item match XPath %s" % path)
    if len(n) > 0:
        return n[0]
    return None


#
# Classes ###
#

class Tasks():

    def __init__(self, dir):
        self.definitions = []
        # Loop over pairs of (filepath, priority [higher better])
        for xmlfile in [[os.path.join(
            dir, os.path.join("etc", "tasks.xml")), 0],
                [os.path.join(dir, os.path.join("etc", "local.xml")), 10]]:
            try:
                self.definitions.append([etree.parse(xmlfile[0]), xmlfile[1]])
            except etree.XMLSyntaxError as e:
                print("Cannot parse the XML file")
                print(e.error_log)
                sys.exit(-1)

        # Pre-compute the list of available tasks
        # and get their corresponding XML node
        self.tasks = {}
        for doc, priority in self.definitions:
            for e in xpath(doc, '//irc:task[not(@abstract)]'):
                name = None
                for p in xpath(e, "ancestor-or-self::irc:task"):
                    if name is None:
                        name = p.get("name")
                    else:
                        name = "%s/%s" % (name, p.get("name"))
                self.tasks[name] = e

    def getAllTasks(self):
        """ Get the list of all non abstract tasks
        """
        return self.tasks

    def getTask(self, id):
        task = self.tasks.get(id)
        if task is None:
            raise Exception("No task [%s] can be found" % id)
        return Task(self.definitions, task)


class TaskObject:

    def __init__(self, origin=None):
        self.origin = origin

    def __getattr__(self, name):
        if name != "origin" and hasattr(self, "origin"):
            if self.origin is not None:
                v = getattr(self.origin, name)
                return v
        raise AttributeError("%s instance has no attribute '%s'" %
                             (self.__class__.__name__, name))


class AbstractDocuments(TaskObject):

    """
        This defines a set of documents

        Properties:
        - id: The unique ID for this collection
        - type: the collection type
        - aliased_from: If this collection is an alias for another, this contains the Documents object

    """

    def __init__(self, origin=None):
        TaskObject.__init__(self, origin)

    def toXML(self):
        xml = XML.documents(type=self.type, id=self.id)
        xml.set("{%s}path" % xpns, self.path)
        if self.compression is not None:
            xml.set("compression", self.compression)

        # Process references
        for subcollection in self.subcollections:
            xml.append(subcollection.toXML())

        return xml

    def toJSON(self):
        subcollections = []
        for subcollection in self.subcollections:
            subcollections.append(subcollection.toJSON())

        r = {
            "$type": "{%s}documents" % ircns,
            "id": self.id,
            "path": xppath(self.path),
            "$format": self.type,
        }
        if subcollections:
            r["$subcollections"] = subcollections

        if self.compression is not None:
            r["$compression"] = self.compression

        return r


class TransformedDocuments(AbstractDocuments):

    def __init__(self, origin, engine):
        AbstractDocuments.__init__(self, origin)
        self.engine = engine
        self.path = "%s.%s" % (self.origin.path, self.engine)

    def generate(self, opts):
        self.origin.generate(opts)
        if opts.generate_collection or not os.path.exists(self.path):
            getattr(self, "generate_%s" % self.engine)(opts)

    def generate_json(self, opts):
        tmp = "%s.tmp" % self.path
        f = open(tmp, "w")
        f.write("[\n")
        for line in open(self.origin.path, "r"):
            f.write(json.dumps({"class": self.origin.type, "path": line.strip()}))
        f.write("]\n")
        f.close()
        shutil.move(tmp, self.path)

    def generate_indri(self, opts):
        tmp = "%s.tmp" % self.path

        origType = self.origin.type
        if origType == "trec":
            filetype = "trectext"
        elif origType == "warc/0.18":
            filetype = "warc"
        else:
            raise Exception("File type %s is not handled by Indri" % origType)

        f = open(tmp, "w")
        f.write('<parameters>\n')
        for line in open(self.origin.path, "r"):
            f.write("<corpus><class>%s</class><path>%s</path></corpus>\n" %
                    (filetype, line.strip()))
        f.write('</parameters>\n')
        f.close()

        shutil.move(tmp, self.path)


class Documents(AbstractDocuments):

    def __init__(self, doc, id):
        collection = findDefinition(doc, id, "collections", "collection")

        if len(collection) == 0:
            raise Exception("Could not find collection with id [%s]" % id)

        self.aliased_from = None
        if len(collection) > 1:
            self.aliased_from = collection[-1].get("id")

        self.collection = collection[0]
        self.type = self.collection.get("type")
        self.id = id

        ref = self.collection.get("ref")
        self.subcollections = []
        if ref is None:
            self.ref = []
        else:
            self.ref = ref.split(" ")
            for ref in self.ref:
                self.subcollections.append(Documents(doc, ref))

        # Sets the base path for the collection (attribute basepath)
        self.basepath = self.collection.get("basepath")
        if self.basepath is None:
            self.basepath = absolutePath("data", "irc.docs", self.id)

        self.compression = self.collection.get("compression")
        self.suffix = self.collection.get("suffix")
        if self.suffix is None:
            self.suffix = ""

        self.engineSuffix = ""
        self.path = absolutePath("data", "irc.cols", self.id)

    def getRelFiles(self):
        if self.aliased_from is None:
            if len(self.subcollections) > 0:
                l = []
                for sc in self.subcollections:
                    l += sc.getRelFiles()
                return l

            return [os.path.join(absolutePath("docs"), "%s.relfiles" % self.id)]
        return self.aliased_from.getRelFiles()

    def getBasePath(self):
        return self.basepath

    def collections(self):
        """Iterates over all collections"""
        yield self
        for sc in self.subcollections:
            for c in sc.collections():
                yield c

    def transform(self, engine):
        return TransformedDocuments(self, engine)

    def generate(self, opts):
        for documents in self.collections():
            docfile = documents.path
            basepath = documents.getBasePath()
            if not os.path.isfile(docfile) or opts.generate_collection:
                tmpdocfile = docfile + ".tmp"
                out = open(tmpdocfile, "w")
                log("Generating the collection file [%s]" % docfile)
                for relfile in documents.getRelFiles():
                    log("Relfile: " + relfile)
                    input = open(relfile, "r")

                    for line in input.readlines():
                        line = line.strip()
                        path = os.path.join(basepath, "%s%s" %
                                            (line, documents.suffix))
                        if opts.check_files and not os.path.exists(path):
                            out.close()
                            input.close()
                            os.remove(tmpdocfile)
                            raise Exception(
                                "File [%s] does not exist - aborting" % path)
                        out.write(path + "\n")
                    input.close()
                out.close()
                shutil.move(tmpdocfile, docfile)


def getDownloadData(el):
    data = []
    for e in xpath(el, "irc:data"):
        data.append({
            "url": xpath1(e, "irc:url/text()"),
            "replace": xpath(e, "irc:replace"),
            "type": e.get("type"),
            "filter": xpath1(e, "irc:filter/text()")
        })

    return data


def generate_trec(info, force):
    # If this is a restriction, get the original path
    path = info.path
    if not os.path.exists(path) or force:
        log("Downloading %s into [%s]..." % (info.id, path))
        createBaseDir(path)

        tmpPath2 = tempfile.NamedTemporaryFile(delete=False)
        out = open(tmpPath2.name, 'w')

        for data in info.data:
            # Get the downloading scheme, fallback on plain text
            f = downloadSchemes.get(data["type"], downloadSchemes.get("plain"))
            url = data["url"]

            # Replace with regular expressions
            tmpPath = tempfile.NamedTemporaryFile(delete=True)
            f[0](tmpPath.name, url, f[1:])

            patterns = [[re.compile(r.get("pattern")), r.get("with")]
                        for r in data["replace"]]
            filter = None
            if data["filter"] is not None:
                filter = re.compile(data["filter"])

            for line in open(tmpPath.name, 'r'):
                for p in patterns:
                    line = p[0].sub(p[1], line)
                if filter is None or filter.match(line):
                    out.write(line)

        out.close()
        shutil.move(tmpPath2.name, path)


class AbstractTopics(TaskObject):

    def __init__(self, origin=None):
        TaskObject.__init__(self, origin)

    def toJSON(self):
        return {
            "$type": "{%s}topics" % ircns,
            "id": self.id,
            "path": xppath(self.path),
            "$format": self.type,
        }

    def toXML(self):
        xml = XML.topics(id=self.id, type=self.type)
        xml.set("{%s}path" % xpns, self.path)
        return xml


class TransformedTopics(AbstractTopics):

    def __init__(self, origin, engine):
        AbstractTopics.__init__(self, origin)
        self.engine = engine
        self.path = "%s.%s" % (self.origin.path, self.engine)
        self.type = "%s.%s" % (self.origin.type, engine)

    def generate(self, opts):
        self.origin.generate(opts)
        if opts.generate_collection or not os.path.exists(self.path):
            # Create a topics object
            topics = topics_create(format, path)

            # Call the matching function transform_X
            fname = "transform_%s" % re.sub("\.", "_", self.engine)
            f = getattr(topics, fname, None)
            if f is None:
                raise Exception("Cannot handle topics of type '%s' for %s [Could not find method %s in %s]" %
                                (self.origin.type, self.engine, fname, topics))

            tmp = "%s.tmp" % self.path
            tmpfile = open(tmp, "w")
            f(tmpfile)
            tmpfile.close()
            shutil.move(tmp, self.path)

def topics_create(format, path):
    if format == "trec":
        return trec.Topics(open(path))

    raise Exception("Cannot handle topics of type '%s'" % format)


def topics_generate_indri_trec_web_2009(self, opts):
    tmp = "%s.tmp" % self.path

    f = open(tmp, "w")
    f.write('<parameters>\n')
    topics = etree.parse(self.origin.path)
    for topic in xpath(topics, "/*/topic"):
        num = topic.get("number")
        title = xpath1(topic, "query").text
        f.write("<query><number>%s</number><text>%s</text></query>\n" %
                (num, re.sub('\W', " ", title)))
        # print(topic)
    f.write('</parameters>\n')
    f.close()

    shutil.move(tmp, self.path)


class Topics(AbstractTopics):

    def __init__(self, doc, id):
        self.id = id

        topics = findDefinition(doc, id, "topics-sets", "topics")[0]
        if topics is None:
            raise Exception("Could not find topics with id [%s]" % id)

        self.path = topics.get("path")
        if self.path is None:
            self.path = os.path.join(re.sub("\\.", os.sep, self.id), "topics")
        self.path = absolutePath("data", self.path)

        self.data = getDownloadData(topics)
        self.type = topics.get("type")
        self.engineSuffix = None

    def generate(self, opts):
        generate_trec(self, opts.download_topics)

    def transform(self, engine):
        return TransformedTopics(self, engine)


class AbstractAssessments(TaskObject):

    def __init__(self, origin=None):
        super(AbstractAssessments, self).__init__(self, origin)

    def transform(self, engine):
        return self

    def restrict(self, documents):
        return RestrictedAssessements(self, documents)

    def toXML(self):
        xml = XML.qrels(id=self.id, type=self.type)
        xml.set("{%s}path" % xpns, self.path)
        return xml

    def toJSON(self):
        return {
            "$type": "{%s}qrels" % ircns,
            "id": self.id,
            "path": xppath(self.path),
            "format": self.type
        }


class RestrictedAssessements(AbstractAssessments):

    def __init__(self, origin, documents):
        self.documents = documents
        self.origin = origin
        self.path = "%s.R.%s" % (origin.path, documents.id)
        self.id = "%s@%s" % (origin.id, documents.id)

    def generate(self, opts):
        self.origin.generate(opts)
        log("Filtering assessments for sub-collection %s" % self.documents.id)

        doc = xpath1(self.documents.collection, "irc:document")
        if doc is None or doc.get("pattern") is None:
            raise Exception(
                "There is no pattern to filter relevance assessments for subcollection %s" %
                self.documents.id)
        m = re.compile(doc.get("pattern"))

        if self.type == "trec":
            self.filter_trec(m)
        else:
            raise Exception("Cannot filter assessments of type %s" % self.type)

    def filter_trec(self, m):
        tmp = "%s.tmp" % self.path

        f = open(tmp, "w")
        for line in open(self.origin.path, "r"):
            filename = line.split(" ")[2]
            if m.match(filename):
                f.write(line)
        f.close()

        shutil.move(tmp, self.path)


class Assessments(AbstractAssessments):

    """This represents Assessments
    """

    def __init__(self, doc, id):
        self.id = id
        qrels = findDefinition(doc, id, "assessments", "qrels")[0]
        if qrels is None:
            raise Exception("Could not find assessments with id [%s]" % id)

        self.path = qrels.get("path")
        if self.path is None:
            self.path = os.path.join(re.sub("\\.", os.sep, self.id), "qrels")
        self.path = absolutePath("data", self.path)
        self.type = qrels.get("type")

        self.data = getDownloadData(qrels)

    def generate(self, opts):
        generate_trec(self, opts.download_assessments)


class Task():

    """Object representing a set task
    """

    def __init__(self, doc, xml):
        self.documents = Documents(doc, find(xml, "collection").text)
        self.assessments = Assessments(doc, find(xml, "qrels").text)
        self.topics = Topics(doc, find(xml, "topics").text)

    def toXML(self):
        root = XML.task(
            self.documents.toXML(),
            self.topics.toXML(),
            self.assessments.toXML()
        )
        return root

    def toJSON(self):
        return {
            "type": "{%s}task" % ircns,
            "documents": self.documents.toJSON(),
            "topics": self.topics.toJSON(),
            "qrels": self.assessments.toJSON()
        }

    def restrict(self, doc, docsid):
        if not docsid in self.documents.ref:
            log("Available: %s" % self.documents.ref)
            raise Exception("No [%s] sub-collection" % docsid)

        self.documents = Documents(doc, docsid)
        if self.documents is None:
            raise Exception("Could not find documents [%s]" % docsid)

        self.assessments = self.assessments.restrict(self.documents)
        return self

    def transform(self, engine):
        self.documents = self.documents.transform(engine)
        self.topics = self.topics.transform(engine)
        self.assessments = self.assessments.transform(engine)
        return self  # FIXME: should not return self but create a new object

    def generate(self, opts):
        self.documents.generate(opts)
        self.topics.generate(opts)
        self.assessments.generate(opts)

#
# List ###
#


def command_list(opts):
    """ List all tasks
    """
    tasks = Tasks(opts.dir)
    opts.pattern = opts.pattern.replace("a", ".+")
    opts.pattern = opts.pattern.replace("%", "[^/]+")

    tasks = tasks.getAllTasks()
    maxLen = 0
    for e in list(tasks.keys()):
        l = len(e)
        if maxLen < l:
            maxLen = l

    f = "%%-%ds %%s" % (maxLen + 3)
    for name, e in sorted(tasks.items()):
        print(f % (name, e.get("description")))

#
# Information #
#


def command_info(args):
    print(("%30s\t%s" % ("Main directory", args.dir)))
    print(("%30s\t%s" %
          ("Global configuration", os.path.join(args.dir, os.path.join("etc", "tasks.xml")))))
    print(("%30s\t%s" % ("Location configuration",
          os.path.join(args.dir, os.path.join("etc", "local.xml")))))


#
# Evaluate ###
#
def find_bin(cmd):
    # Check the bin directory
    path = join(ircdir, "bin", cmd)
    if os.path.exists(path):
        return path

    # Otherwise, we assume it is in the PATH
    return cmd


def command_get_topics(opts):
    j = json.load(open(opts.topics))
    format = j["$format"]
    topics = topics_create(format, j["path"]["$value"])
    getattr(topics, "transform_%s" % opts.format)(sys.stdout)

def command_evaluate(opts):
    if opts.json:
        if opts.assessments:
            qrels = json.load(open(opts.assessments))
        else:
            qrels = json.loads(sys.stdin)
        qrels_type = qrels["format"]
        qrels_path = qrels["path"]["$value"]

    else:
        if opts.assessments:
            qrels = etree.parse(opts.assessments)
        else:
            qrels = etree.parse(sys.stdin)

        qrels = qrels.getroot()
        qrels_type = qrels.get("{%s}type" % xpns)
        qrels_path = qrels.get("{%s}path" % xpns)

    runfile = opts.run

    if qrels_type == "trec":
        trec_eval = find_bin("trec_eval")

        if qrels_path is None:
            raise Exception("Cannot retrieve the assessments path")
        command = [trec_eval, qrels_path, runfile]
        code = subprocess.call(command, stdout=sys.stdout, stderr=sys.stderr)
        sys.exit(code)
    else:
        raise Exception("Cannot evaluate qrels with type %s", qrels_type)


#
# Get ###
#

def get_task(opts, generate):
    tasks = Tasks(opts.dir)
    taskid = opts.task
    task = tasks.getTask(taskid)

    if opts.restrict:
        task = task.restrict(tasks.definitions, opts.restrict)

    if opts.engine != "none":
        task = task.transform(opts.engine)

    if generate:
        task.generate(opts)

    if opts.json:
        print(json.dumps(task.toJSON(), indent=2))
    else:
        sys.stdout.write(etree.tostring(task.toXML(), pretty_print=True,
                         encoding="utf-8", xml_declaration=True).decode("utf-8"))


def command_get(opts):
    get_task(opts, False)


def command_prepare(opts):
    get_task(opts, True)


def createBaseDir(path):
    dir = os.path.dirname(path)
    if not os.path.isdir(dir):
        log("Creating directory %s" % dir)
        os.makedirs(dir)


def getTarGZFile(path, url, args):
    """Download QRELS as a set of gzipped files in a tar.gz archive
    """
    tmpdir = None
    try:
        # Temporary directory
        tmpdir = tempfile.mkdtemp()
        tmpfile = "%s/file.dl" % tmpdir
        urllib.request.urlretrieve(url, tmpfile)
        d = "%s/all" % tmpdir
        tarfile.open(tmpfile).extractall(path="%s/all" % tmpdir)
        f_out = open("%s/qrels" % tmpdir, 'w')
        for aPath in (os.path.join(d, f) for f in os.listdir(d)):
            log("Uncompressing %s" % aPath)
            if args[0]:
                gzf = gzip.open(aPath, "rt")
            else:
                gzf = open(aPath, "r")
            f_out.write(gzf.read())
            gzf.close()
        f_out.close()

        # Move in place
        shutil.move("%s/qrels" % tmpdir, path)
        log("Created file %s" % path)
    finally:
        if not tmpdir is None:
            rm_rf(tmpdir)


def getGZFile(path, url, args):
    """Get a GZIPPED file over the network and uncompress it
    """
    gzfile = tempfile.NamedTemporaryFile(delete=True)
    urllib.request.urlretrieve(url, gzfile.name)

    # Uncompress
    file = tempfile.NamedTemporaryFile(delete=True)
    f = gzip.open(gzfile.name, mode="r")
    file.writelines(f)
    f.close()

    # Move
    log("Uncompressed in %s" % file.name)
    shutil.move(file.name, path)
    log("Created file %s" % path)
    try:
        file.close()
    except:
        pass
    try:
        gzfile.close()
    except:
        pass


def getPlainFile(path, url, args):
    """Get a plain text file
    """
    tmpFile = tempfile.NamedTemporaryFile(delete=False)
    log("Download in %s" % tmpFile.name)
    urllib.request.urlretrieve(url, tmpFile.name)
    log("Moving in %s" % path)
    shutil.move(tmpFile.name, path)


# --- List of download schemes
downloadSchemes = {
    "tar.gz#gz": [getTarGZFile, True],
    "tar.gz": [getTarGZFile, False],
    "gz": [getGZFile],
    "plain": [getPlainFile]
}

#
# Main ###
#


class IRCException():

    def __init__(self):
        pass


def main(dir, argv):
    # create the top-level parser
    parser = argparse.ArgumentParser(description='IR collections script.')
    subparsers = parser.add_subparsers(help='sub-command help', dest='command')
    parser.set_defaults(dir=dir)

    # Informations
    subparsers.add_parser("info", help="Information about ircollections")

    # list
    parser_list = subparsers.add_parser("list", help="List the tasks")

    parser_list.add_argument("--full", "-f", dest="full", action="store_true",
                             help="Prints a full list (otherwise print first level)")
    parser_list.add_argument(
        "--pattern", "-p", help="Pattern for task name where %% matches one level and %%%% matches all", default="^%")


    # Get topics
    get_topics = subparsers.add_parser("get-topics", help="Get topics")
    get_topics.add_argument("--format", choices=["indri", "json"], default="json")
    get_topics.add_argument("topics", type=str, help="Topic description in JSON (either a file or a string)")

    # get & prepare
    parser_prepare = subparsers.add_parser(
        "prepare", help="Prepare resources for a task")
    parser_prepare.add_argument("--no-file-check", "-n", dest="check_files",
                                action="store_false", help="Skip checking file existence")
    parser_prepare.add_argument(
        "--download-assessments", dest="download_assessments",
        action="store_true", help="Force downloading assessments")
    parser_prepare.add_argument("--download-topics", dest="download_topics",
                                action="store_true", help="Force downloading topics")
    parser_prepare.add_argument(
        "--generate-collection", dest="generate_collection",
        action="store_true", help="Force generating collection file")

    parser_get = subparsers.add_parser("get", help="Get a task")

    parser_evaluate = subparsers.add_parser("evaluate", help="Evaluate a run")
    parser_evaluate.add_argument(
        "--json", action="store_true", help="JSON input")

    for p in [parser_get, parser_prepare]:
        p.add_argument("--engine", choices=["none", "indri", "json"],
                       default="none", help="Customize files with a given engine")
        p.add_argument("--json", action="store_true", help="JSON output")
        p.add_argument("--restrict", help="Restrict to a sub-collection")
        p.add_argument("task", help="The task name")

    parser_evaluate.add_argument("run", help="The run file to evaluate")
    parser_evaluate.add_argument(
        "assessments", nargs="?", help="The XML description of the assessments (as returned by ircollections)")

    args = parser.parse_args()
    if args.command is None:
        parser.print_help()
        sys.exit()

    # try:
    fname = "command_%s" % args.command.replace("-", "_")
    f = globals()[fname]
    f(args)
    # except Exception as e:
    #     print("Error while running command %s:" % args.command)
    #     print(e)


# ---- MAIN ----

if __name__ == "__main__":
    main(ircdir, sys.argv[1:])
